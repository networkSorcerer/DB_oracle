CREATE TABLE SUBJECT (
NO NUMBER NOT NULL,
S_NUM VARCHAR2(2) NOT NULL,
S_NAME VARCHAR2(80) NOT NULL,
CONSTRAINT SUBJECT_NO_PK PRIMARY KEY(NO),
CONSTRAINT SUBJECT_S_NUM_UK UNIQUE(S_NUM)
);

INSERT INTO SUBJECT(NO, S_NUM, S_NAME) VALUES (1, '01','컴퓨터학과');
INSERT INTO SUBJECT(NO, S_NUM, S_NAME) VALUES (2, '02','교육학과');
INSERT INTO SUBJECT(NO, S_NUM, S_NAME) VALUES (3, '03','신문방송학과');
INSERT INTO SUBJECT(NO, S_NUM, S_NAME) VALUES (4, '04','인터넷비즈니스과');
INSERT INTO SUBJECT(NO, S_NUM, S_NAME) VALUES (5, '05','기술경영과');

SELECT*FROM SUBJECT ORDER BY NO;

CREATE TABLE STUDENT (
NO NUMBER NOT NULL,
SD_NUM VARCHAR2(8) NOT NULL,
SD_NAME VARCHAR2(20) NOT NULL,
SD_ID VARCHAR2(15) NOT NULL,
SD_PASSWD VARCHAR2(15) NOT NULL,
S_NUM VARCHAR2(2) NOT NULL,
SD_BIRTH CHAR(8) NOT NULL,
SD_PHONE VARCHAR2(15) NOT NULL,
SD_ADDRESS VARCHAR2(200) NOT NULL,
SD_EMAIL VARCHAR2(100) NOT NULL,
SD_DATE DATE DEFAULT SYSDATE,
CONSTRAINT STUDENT_NO_PK PRIMARY KEY (NO),
CONSTRAINT STUDENT_SD_NUM_UK UNIQUE(SD_NUM),
CONSTRAINT STUDENT_ID_UK UNIQUE(SD_ID),
CONSTRAINT STUDENT_S_NUM_FK FOREIGN KEY(S_NUM) REFERENCES SUBJECT (S_NUM)
);

INSERT INTO STUDENT (NO, SD_NUM, SD_NAME, SD_ID, SD_PASSWD, S_NUM, SD_BIRTH, SD_PHONE, SD_ADDRESS, SD_EMAIL,SD_DATE)
VALUES (1, '06010001', '김정수', 'JAVAJSP', '061010', '01', '20061010',' 01032567987', '서울시 서대문구 창전동', 'DFGDF@GMAIL.COM');
INSERT INTO STUDENT (NO, SD_NUM, SD_NAME, SD_ID, SD_PASSWD, S_NUM, SD_BIRTH, SD_PHONE, SD_ADDRESS, SD_EMAIL,SD_DATE)
VALUES (2, '95010002', '김수현', 'JDBCMANIA', '951010', '01', '19950510', '01023574895', '서울시 서초구 양재동', 'FGDFNN@GMAIL.COM');
INSERT INTO STUDENT (NO, SD_NUM, SD_NAME, SD_ID, SD_PASSWD, S_NUM, SD_BIRTH, SD_PHONE, SD_ADDRESS, SD_EMAIL,SD_DATE)
VALUES (3, '98040001', '공지영', 'GONJI', '981010', '04',' 19980310', '01025416788', '부산광역시 해운대구 반송동', 'FEWJJ@GMAIL.COM');
INSERT INTO STUDENT (NO, SD_NUM, SD_NAME, SD_ID, SD_PASSWD, S_NUM, SD_BIRTH, SD_PHONE, SD_ADDRESS, SD_EMAIL,SD_DATE)
VALUES (4, '02050001', '조수영', 'WATER', '201010','05', '20000610', '01098774565', '대전광역시 중구 은행동', 'QWFGRDF@GMAIL.COM');
INSERT INTO STUDENT (NO, SD_NUM, SD_NAME, SD_ID, SD_PASSWD, S_NUM, SD_BIRTH, SD_PHONE, SD_ADDRESS, SD_EMAIL,SD_DATE)
VALUES (5, '94040002', '최경란', 'NOVEL', '941010', '04', '20020421', '01014789545', '수원시 장안구 이목동', 'LGLHGASDF@GMAIL.COM');
INSERT INTO STUDENT (NO, SD_NUM, SD_NAME, SD_ID, SD_PASSWD, S_NUM, SD_BIRTH, SD_PHONE, SD_ADDRESS, SD_EMAIL,SD_DATE)
VALUES (6, '08020001', '안익태', 'KOREA', '801010', '02',' 20000731', '01066895456', '서울 강남', 'QWERASDF@GMAIL.COM');

CREATE TABLE LESSON (
NO NUMBER NOT NULL,
L_ABBRE VARCHAR2(2) NOT NULL,
L_NAME VARCHAR2(80) NOT NULL,
CONSTRAINT LESSON_NO_PK PRIMARY KEY(NO),
CONSTRAINT LESSON_L_ABBRE_UK UNIQUE(L_ABBRE)
);

INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(1,'K','국어');
INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(2,'M','수학');
INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(3,'E','영어');
INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(4,'H','역사');
INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(5,'P','프로그래밍');
INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(6,'D','데이터베이스');
INSERT INTO LESSON(NO, L_ABBRE, L_NAME) VALUES(7,'ED','교육학이론');

--수강테이블
CREATE TABLE TRAINEE(
NO NUMBER NOT NULL,
SD_NUM VARCHAR2(8) NOT NULL,
L_ABBRE VARCHAR2(2) NOT NULL,
T_SECTION VARCHAR2(50) NOT NULL,
T_DATE DATE DEFAULT SYSDATE,
CONSTRAINT TRAINEE_NO_PK PRIMARY KEY(NO),
CONSTRAINT TRAINEE_SD_NUM_FK FOREIGN KEY(SD_NUM) REFERENCES STUDENT(SD_NUM),
CONSTRAINT TRAINEE_L_ABBRE_FK FOREIGN KEY(L_ABBRE) REFERENCES LESSON(L_ABBRE)
);

INSERT INTO TRAINEE
VALUES ( 1, '06010001','P','MAJOR',SYSDATE);
INSERT INTO TRAINEE
VALUES ( 2, '95010002','E','CULTURE',SYSDATE);
INSERT INTO TRAINEE
VALUES ( 3, '98040001','D','MAJOR',SYSDATE);
INSERT INTO TRAINEE
VALUES ( 4, '02050001','M','MINOR',SYSDATE);
INSERT INTO TRAINEE
VALUES ( 5, '94040002','P','MAJOR',SYSDATE);
INSERT INTO TRAINEE
VALUES ( 6, '08020001','ED','MAJOR',SYSDATE);

--1. 학번, 학생명과 학과번호, 학과명을 출력하도록 쿼리문 작성해보세요
SELECT S.SD_NUM , S.SD_NAME, B.S_NUM, B.S_NAME
FROM STUDENT S INNER JOIN SUBJECT B
ON S.S_NUM= B.S_NUM;
-- 우리학교 전체 학과명과 그 학과에 소속된 학생명, 아이디를 출력하도록 쿼리문을 작성해 주세요
SELECT
    S.S_NAME AS DEPARTMENT_NAME,
    ST.SD_NAME AS STUDENT_NAME,
    ST.SD_ID AS STUDENT_ID
FROM
    SUBJECT S
JOIN
    STUDENT ST ON S.S_NUM = ST.S_NUM;

--수강테이블에서 수강 신청한 학생명 과목명 등록일을 출력하도록
--쿼리 문을 작성해주세요

--1.학번, 학생명과 학과번호, 학과명을 출력하도록 쿼리문 작성해주세요
SELECT SD_NUM 학번, SD_NAME 학생명, ST.S_NUM 학과번호, S_NAME 학과명
FROM SUBJECT SB INNER JOIN STUDENT ST
ON SB.S_NUM = ST.S_NUM;

--2.우리학교 전체 학과명과 그 학과에 소속된 학생명, 아이디를 
--출력하도록 쿼리문을 작성해 주세요
SELECT SB.S_NUM, S_NAME 학과명, SD_NAME 학생명, SD_ID 아이디
FROM SUBJECT SB LEFT OUTER JOIN STUDENT ST
ON SB.S_NUM = ST.S_NUM
ORDER BY SB.S_NUM;

--3. 수강 테이블에서 수강 신청한 학생명 , 과목명, 등록일 을 
--출력하도록 쿼리문 작성해 주세요 

SELECT SD_NAME 학생명 , L_NAME 과목명, TO_CHAR (T_DATE, 'YYYY.MM.DD')
수강신청일 FROM TRAINEE TR, STUDENT ST, LESSON LE
WHERE TR.SD_NUM = ST.SD_NUM AND TR.L_ABBRE =LE.L_ABBRE;

SELECT SD_NAME 학생명, L_NAME 과목명, TO_CHAR(T_DATE, 'YYYY.MM.DD')
FROM TRAINEE TR, STUDENT ST, LESSON LE
WHERE TR.SD_NUM-ST.SD_NUM AND TR.L_ABBRE-LE.L_ABBRE;

SELECT SD_NAME 학생명, L_NAME 과목명, TO_CHAR(T_DATE,'YYYY.MM.DD')
FROM TRAINEE TR INNER JOIN STUDENT ST ON TR.SD_NUM = ST.SD_NUM
INNER JOIN STUDENT ST ON TR.SD_NUM = ST.SD_NUM
INNER JOIN LESSON LE ON TR.L_ABBRE = LE.L_ABBRE;

SELECT S_NAME 학과명, L_NAME 과목명, TO_CHAR(T_DATE, 'YYYY_MM_DD')
FROM SUBJECT SU INNER JOIN STUDENT ST ON SU.S_NUM = ST.S_NUM
INNER JOIN TRAINEE TR ON TR.SD_NUM = ST.SD_NUM
INNER JOIN LESSON LE ON TR.L_ABBRE = LE.L_ABBRE;




--4.학과에 소속된 학생수를 출력하도록 쿼리문 작성해주세요

SELECT B.S_NAME, COUNT(S.SD_NAME) AS 학생수
FROM STUDENT S JOIN SUBJECT B ON S.S_NUM = B.S_NUM
GROUP BY B.S_NAME;

SELECT S_NAME 학과명, COUNT(SD_NUM)학생수
FROM SUBJECT SB INNER JOIN STUDENT ST
ON SB.S_NUM = ST.S_NUM
GROUP BY S_NAME ,SB.S_NUM
ORDER BY SB.S_NUM;

--5.전체 학과명을 출력하고 그 학과에 소속된 학생 수를 출력하도록 쿼리문 
--작성해주세요

SELECT S_NAME 학과명 , COUNT(SD_NUM)학생수
FROM SUBJECT SB LEFT OUTER JOIN STUDENT ST
ON SB.S_NUM = ST.S_NUM
GROUP BY  S_NAME, SB.S_NUM
ORDER BY SB.S_NUM;