--저장 프로시저
--프로시저는 지정된 특정처리를 실행하는 서브프로그램의 한 유형이다
--저장 프로시저는 자주 사용되는 쿼리문을 모듈화시켜서 필요할 때마다 호출하여 사용하는 것을 말한다

CREATE OR REPLACE PROCEDURE EMPPROC
IS
VWORD VARCHAR2(1);
VEMPLOYEES EMPLOYEES%ROWTYPE;
CURSOR C1 (VWORD VARCHAR2)
IS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'||VWORD||'%';
BEGIN
VWORD := DBMS_RANDOM.STRING('U',1);
DBMS_OUTPUT.PUT_LINE('임의의 문자 : ' ||VWORD);
OPEN C1 (VWORD);
DBMS_OUTPUT.PUT_LINE('사번/사원명/급여');
DBMS_OUTPUT.PUT_LINE('--------------');
LOOP
FETCH C1 INTO VEMPLOYEES.EMPLOYEE_ID, VEMPLOYEES.FIRST_NAME, VEMPLOYEES.SALARY;
IF C1%ROWCOUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE('해당 사원이 존재하지 않습니다');
END IF;
EXIT WHEN C1 %NOTFOUND;
DBMS_OUTPUT.PUT_LINE(VEMPLOYEES.EMPLOYEE_ID||'/'||VEMPLOYEES.FIRST_NAME||'/'||
VEMPLOYEES.SALARY);
END LOOP;
END;
/

--생성된 저장 프로시저는 EXECUTE 프로시저명 또는 EXEC 프로시저명 명령어로 실행시킨다

EXECUTE EMPPROC;

--저장 프로시저를 작성한후 사용자가 저장 프로시저가 생성되었는딪 확인하려면 USER_SOURCE 살펴보면된다
SELECT * FROM USER_SOURCE;


--매개변수는 프로시저 이름뒤에 ()를 기술하여 그 내부에 매개변수를 정의한다.
--형식은 변수명 모드 자료형으로 기술한다

CREATE OR REPLACE PROCEDURE EMPPROC02 (VDEPARTMENT_ID IN EMPLOYEES.DEPARTMENT_ID%TYPE)
IS 
CURSOR C1
IS 
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = VDEPARTMENT_ID;
BEGIN
DBMS_OUTPUT.PUT_LINE('사원번호 / 사원명 / 급여');
DBMS_OUTPUT.PUT_LINE('--------------------');
FOR VEMPLOYEES IN C1 LOOP
DBMS_OUTPUT.PUT_LINE(VEMPLOYEES.EMPLOYEE_ID||'/'||VEMPLOYEES.FIRST_NAME||'/'||
VEMPLOYEES.SALARY);
END LOOP;
END;
/
SHOW ERROR;

--IN모드 기본모드 값이 서브프로그램에 전달됨 실제 파라미터가 리터럴 , 표현식, 상수 또는 초기화된 변수
--기본값을 할당 할수 있음
--OUT모드 명시적으로 지정해야한다
--값이 호출환경에 반환됨
--변수만 사용가능
--기본값 할당 불가
--INOUT모드 
--명시적으로 지정해야한다
--값이 서브프로그램에도 전달되고 호출 환경에도 반환됨
--변수만 사용 가능
--기본값 할당 불가

--IN MODE 매개 변수
--실행환경에서 서브 프로시저로 값을 전달한다

--부서별로 SALARY 인상, 부서코드가 10DLAUS 10%인상, 20이면 20%인상 나머지 동결하는
--쿼미문을 작성하여 보자 그전에 변경전 데이터를 확인한다
SELECT DEPARTMENT_ID, FIRST_NAME, SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

CREATE TABLE EMPLOYEES01 AS SELECT * FROM EMPLOYEES;

CREATE OR REPLACE PROCEDURE EMPPROC_INMODE
(VDEPARTMENT_ID IN EMPLOYEES01.DEPARTMENT_ID%TYPE)
IS 
BEGIN
UPDATE EMPLOYEES01 SET SALARY = DECODE(VDEPARTMENT_ID, 10 , SALARY*1.1,20,SALARY*1.2,SALARY)
WHERE  DEPARTMENT_ID = VDEPARTMENT_ID;
COMMIT;
DBMS_OUTPUT.PUT_LINE('수정이 완료되었습니다');
END EMPPROC_INMODE;
/
SHOW ERROR;

EXECUTE EMPPROC_INMODE(20);

SELECT DEPARTMENT_ID, FIRST_NAME, SALARY FROM EMPLOYEES01 WHERE DEPARTMENT_ID = 20;

SELECT *FROM DEPT01;

CREATE OR REPLACE PROCEDURE DEPTPROC_INMODE
(DEPTNO IN DEPT01.DEPTNO%TYPE,
DNAME IN DEPT01.DNAME%TYPE,
LOC IN DEPT01.LOC%TYPE)
IS 
BEGIN
INSERT INTO DEPT01(DEPTNO, DNAME, LOC, CREDATE)
VALUES(DEPTNO, DNAME, LOC,SYSDATE);
COMMIT;

DBMS_OUTPUT.PUT_LINE('부서번호/부서명/지역명/등록일');
DBMS_OUTPUT.PUT_LINE('-------------------------');

FOR VDEPT IN (SELECT DEPTNO, DNAME, LOC, CREDATE FROM DEPT01 ORDER BY DEPTNO) LOOP
DBMS_OUTPUT.PUT_LINE(VDEPT.DEPTNO||'/'||RPAD(VDEPT.DNAME,10)||'/'
||VDEPT.LOC||'/'||TO_CHAR(VDEPT.DNAME,'YYYY-MM-DD'));
END LOOP;
END;
/
SHOW ERROR;

EXECUTE DEPTPROC_INMODE(60,'기획부','부산');

--DEPTPROC_INUP이라는 이름으로 프로시저를 생성해 주세요 . 프로시저 실행시 인수로 부서번호,
--부서명, 지역명을 얻어 현재 DEPT01 테이블에서 부서번호가 존재하면 수정을 실행하고 부서번호가
--존재하지 않는다면 실행하도록 생성한다

CREATE OR REPLACE PROCEDURE DEPTPROC_INUP
(PDEPTNO IN DEPT01.DEPTNO%TYPE,
PDNAME IN DEPT01.DNAME%TYPE,
PLOC IN DEPT01.LOC%TYPE)
IS
CNT NUMBER :=0;
VDEPT DEPT01%ROWTYPE;
BEGIN
SELECT COUNT(*) INTO CNT FROM DEPT01 WHERE DEPTNO =PDEPTNO;
IF CNT = 0 THEN
INSERT INTO DEPT01(DEPTNO, DNAME, LOC, CREDATE)
VALUES(PDEPTNO, PDNAME, PLOC, SYSDATE);
ELSE
UPDATE DEPT01
SET DNAME = PDNAME, LOC = PLOC, CREDATE = SYSDATE
WHERE DEPTNO = PDEPTNO;
END IF;
COMMIT;

DBMS_OUTPUT.PUT_LINE('부서번호/부서명/지역명/등록일');
DBMS_OUTPUT.PUT_LINE('--------------------------');
SELECT DEPTNO,DNAME,LOC, CREDATE INTO VDEPT
FROM DEPT01 WHERE DEPTNO = PDEPTNO;
DBMS_OUTPUT.PUT_LINE(VDEPT.DEPTNO||'/'||RPAD(VDEPT.DNAME,10)||'/'
||VDEPT.LOC||'/'||TO_CHAR(VDEPT.CREDATE,'YYYY-MM-DD'));
END;
/
SHOW ERROR;

CREATE OR REPLACE PROCEDURE EMPPROC_OUTMODE(
VEMPLOYEE_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE,
VFIRST_NAME OUT EMPLOYEES.FIRST_NAME%TYPE,
VSALARY OUT EMPLOYEES.SALARY%TYPE,
VJOB_ID OUT EMPLOYEES.JOB_ID%TYPE
)
IS 
BEGIN
SELECT FIRST_NAME, SALARY, JOB_ID INTO VFIRST_NAME, VSALARY, VJOB_ID
FROM EMPLOYEES
WHERE EMPLOYEE_ID = VEMPLOYEE_ID;
END;
/

DECLARE
VEMPLOYEE EMPLOYEES%ROWTYPE;
BEGIN
EMPPROC_OUTMODE(120, VEMPLOYEE.FIRST_NAME, VEMPLOYEE.SALARY, VEMPLOYEE.JOB_ID);
DBMS_OUTPUT.PUT_LINE('사원명:'||VEMPLOYEE.FIRST_NAME);
DBMS_OUTPUT.PUT_LINE('급여:'||VEMPLOYEE.SALARY);
DBMS_OUTPUT.PUT_LINE('직무:'||VEMPLOYEE.JOB_ID);
END;
/
