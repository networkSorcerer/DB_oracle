select*from tab;

select*from departments;

select*from employees;

select*from tab;

DESC EMPLOYEES;

SELECT*FROM EMPLOYEES;

DESC DEPARTMENTS;

SELECT*FROM DEPARTMENTS;
--DEPARTMENTS
SELECT*FROM DEPARTMENTS;
--EMPLOYEES 테이블의 모든 내용 출력
--DEPARTMENTS 테이블에서 부서 번호와 부서명만 출력
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS;
--AS로 컬럼에 별칭 부여하기 : 칼럼을 기술한 바로 뒤에 AS라는 키워드를 쓴 후 별칭을 기술

SELECT DEPARTMENT_ID AS DepartmentNo, DEPARTMENT_NAME AS DepartmentName
FROM DEPARTMENTS;

--AS 없이 컬럼에 별칭 부여하기
SELECT DEPARTMENT_ID "Department No", DEPARTMENT_NAME "Department Name"
FROM DEPARTMENTS;

--  별칭으로 한글 사용이 가능하다
SELECT DEPARTMENT_ID 부서번호, DEPARTMENT_NAME 부서명
FROM DEPARTMENTS;
--CONCATENATION 연산자의 정의와 사용(연결 연산자)
--여러 컬럼을 하나의 문자열로 출력하기
SELECT FIRST_NAME ||'의 직급은'||JOB_ID||'입니다'AS직급
FROM EMPLOYEES;

--중복된 데이터를 한번씩만 출력하게 하는 DISTINCT
SELECT JOB_ID FROM EMPLOYEES;
--전체 직원을 대상
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES;

--급여를 3000이상 받는 직원을 대상 
SELECT EMPLOYEE_ID, FIRST_NAME , SALARY
FROM EMPLOYEES
WHERE SALARY>= 3000;

--급여를 3000미만 받는 직원을 대상

SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY <3000
--부서번호가 110번인 직원에 관한 모든 정보만 출력하라

SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 110;

--급여가 5000미만이 되는 직원의 정보중에서 사번과 이름, 급여를 출력하라

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE FIRST_NAME = 'Lex';

-- 2008년 이후에 입사한 직원
SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >= '2008/01/01';

--논리 연산자 여러 조건을 모두 만족해야 할 경우 AND연산자를 사용한다
--부서번호가 100번이고 직급이 FI_MGR인 직원

SELECT EMPLOYEE_ID, FIRST_NAME, PHONE_NUMBER, DEPARTMENT_ID,
JOB_ID FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100 AND JOB_ID = 'FI_MGR';

--급여가 5000에서 10000이하 직원 정보 출력
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE SALARY >= 5000 AND SALARY <= 10000
-- OR 연산자
-- 부서 번호가 100번이거나 직급이 FI_MGR인 직원

SELECT EMPLOYEE_ID, FIRST_NAME, PHONE_NUMBER, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID =100 OR JOB_ID = 'FI_MGR';

--사원번호가 134이거나 201이거나 107인 직원 정보 출력
SELECT DEPARTMENT_ID 
FROM EMPLOYEES

SELECT EMPLOYEE_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID

--부서번호가 100번이 아닌 직원

SELECT EMPLOYEE_ID, FIRST_NAME, PHONE_NUMBER, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE NOT DEPARTMENT_ID IN(100);

--급여가 2000에서부터 3000까지의 범위에 속한 사원
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 2000 AND 3000;

SELECT EMPLOYEE_ID , FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 2500 AND 4500

--직원번호가 177 이거나 101 이거나 184 인 사원
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE EMPLOYEE_ID=177 OR EMPLOYEE_ID=101 OR EMPLOYEE_ID=184;

SELECT EMPLOYEE_ID , FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE EMPLOYEE_ID IN(177, 101, 184);

--부서번호가 10, 20,30 중 하나에 소속된 직원의 직원 번호,이름 급여를 출력하라
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN ( 10, 20, 30);

--와일드카드(%) 사용하기
--%는 검색하고자 하는 값을 정확히 모를 경우 사용한다 %는 몇개의 문자가 오든 상관없다는의미
--K로 시작하는사원
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE'K%';
--K를 포함하는 사원
SELECT EMPLOYEE_ID , FIRST_NAME
FROM EMPLOYEES
WHERE LOWER(FIRST_NAME)LIKE'%k%';

--이름이 K로 끝나는 사원
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE'%k';

--와일드카드(_) 사용하기
--  -는 한문자를 대신해서 사용한것
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_d%';

--NULL을위한 연산자
--오라클에서는 칼럼에 NULL값이 저장되는 것을 허용한다
--NULL은 미확정, 알 수없는 (UNKNOWN)값을 의미한다. 0(ZERO)도 빈공간도 아닌 어떤 값이
--존재하기는 하지만 어떤 값인지를 알아낼수없는 것을 의미한다
--NULL은 연산, 할당, 비교가 불가능하다

--커미션을 받지 않는 사원에 대한 검색
SELECT EMPLOYEE_ID , FIRST_NAME, COMMISSION_PCT, JOB_ID
FROM EMPLOYEES
WHERE COMMISSION_PCT=NULL;

-- IS NULL , IS NOT NULL 로 표현 = 이나 !=을 사용하지 않는다

--커미션을 받지 않는 사원
SELECT EMPLOYEE_ID , FIRST_NAME, COMMISSION_PCT, JOB_ID
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

--커미션을 받는 사원
SELECT EMPLOYEE_ID, FIRST_NAME, COMMISSION_PCT, JOB_ID
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

--자신의 직속 상관이 없는 직원의 전체 이름과 직원 번호 업무 ID를 출력하라

SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;

--ASC 오름차순 DESC 내림차순

--사번을 기준으로 오름 차순으로 정렬
SELECT EMPLOYEE_ID , FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID ASC;

-- 내림차순으로 정렬을 위한 DESC
-- 사원번호를 기준으로 내림차순으로 정렬
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID DESC;
