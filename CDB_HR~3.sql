DECLARE
--%ROWTYPE 속성으로 로우를 저장할수있는 레퍼런스 변수 선언
VEMPLOYEES EMPLOYEES%ROWTYPE;
VSALARY NUMBER(8, 2);
BEGIN
DBMS_OUTPUT.PUT_LINE('사번 / 이름 / 급여');
DBMS_OUTPUT.PUT_LINE('--------------------');
--PAT사원의 전체정보를 로우 단위로 얻어와 VEMPLOYEES에 저장한다
SELECT*INTO VEMPLOYEES
FROM EMPLOYEES
WHERE FIRST_NAME = 'Pat';
--커미션이 null일 경우 이를 0으로 변경해야 올바른 급여 계산이 가능하다
IF(VEMPLOYEES.COMMISSION_PCT IS NULL) THEN
VEMPLOYEES.COMMISSION_PCT :=0;
END IF;

--스칼라 변수에 급여를 계산할 결과를 저장한다
VSALARY := VEMPLOYEES.SALARY + (VEMPLOYEES.SALARY * VEMPLOYEES.COMMISSION_PCT);
--레퍼런스 변수와 스칼라 변수에 저장된 값을 출력한다
DBMS_OUTPUT.PUT_LINE('사원번호 :' || VEMPLOYEES.EMPLOYEE_ID||
'/사원명 : ' || VEMPLOYEES.FIRST_NAME||
'/급여 : '|| TO_CHAR(VSALARY,'$999,999'));
END;
/

DECLARE
--%ROWTYPE 속성으로 로우를 저장할수 있는 레퍼런스 변수 선언
VEMPLOYEES EMPLOYEES%ROWTYPE;
VSALARY NUMBER(8, 2);
BEGIN
DBMS_OUTPUT.PUT_LINE('사번 / 이름/ 급여');
DBMS_OUTPUT.PUT_LINE('----------------');
SELECT * INTO VEMPLOYEES
FROM EMPLOYEES
WHERE FIRST_NAME='Jack';
IF(VEMPLOYEES.COMMISSION_PCT IS NULL) THEN 
VSALARY := VEMPLOYEES.SALARY;
ELSE
VSALARY := VEMPLOYEES.SALARY + (VEMPLOYEES.SALARY * VEMPLOYEES.COMMISSION_PCT);
END IF;

DBMS_OUTPUT.PUT_LINE('사원번호:' || VEMPLOYEES.EMPLOYEE_ID||
'/사원명 :'||VEMPLOYEES.FIRST_NAME||
'/급여 : '||TO_CHAR(VSALARY,'$999,999'));
END;
/
DECLARE
I NUMBER := 1;
VDEPARTMENTS DEPARTMENTS%ROWTYPE;
BEGIN
DBMS_OUTPUT.PUT_LINE('부서 번호 / 부서명 / 지역명');
DBMS_OUTPUT.PUT_LINE('--------------------------');
WHILE I <= 27 LOOP
IF I MOD 2 = 0 THEN
SELECT * INTO VDEPARTMENTS FROM DEPARTMENTS WHERE DEPARTMENT_ID = 10*I;
DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||'/'||
VDEPARTMENTS.DEPARTMENT_NAME||'/'||VDEPARTMENTS.LOCATION_ID);
END IF;
I := I+1;
END LOOP;
END;
/

--커서 오라클서버에서는 SQL 문을 실행할때마다 처리(PARSE, EXCEPTION)를 위한 메모리 공간을 
--사용한다
--즉 사용자가 요청하는 데이털르 데이터베이스 버퍼 캐시에서 커서로 복사해온 후 커서에서 원하는 데이터를 추출하여 
--FETCH)원하는 작업을 하게 된다는 뜻이다. 이메모리 공간을 PRIVATE SQL이라고도 부른다

--다시 말해 커서란 특정 SQL문장을 처리한 결가를 담고 있느 영역을 가리키는 일종의 포인터로, 커서를 사용하면 처리된
--SQL문장의 결과 집합에 접근할수 있다. 커서의 종류에는 묵시적 커서와 명시적 커서가 있다. 묵시적 커서란 오라클 내부에 
--자동으로 생성하는 커서, 명시적 커서는 사용자가 직접 정의해서 사용하는 커서를 말한다. 커서열기 - 패치 - 커서닫기

--커서의 상태
--%NOTFOUND 커서영역의 자료가 모두 FETCH되었다면 TRUE
--%FOUND 커서영역에 FETCH되지 않은 자료가 있다면 TRUE
--%ISOPEN 커서가 OPEN된 상태이면 TRUE
--%ROWCOUNT 커서가 얻어 온 레코드의개수

DECLARE 
VDEPARTMENTS DEPARTMENTS%ROWTYPE;
CURSOR C1 -- 커서 이름
IS SELECT DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID
FROM DEPARTMENTS; --부서 테이블의 전체 내용을 조회한다
BEGIN
DBMS_OUTPUT.PUT_LINE('부서번호/부서명/지역명');
DBMS_OUTPUT.PUT_LINE('-------------------');

OPEN C1;
--오픈한 C1커서가 SELECT문에 의해 검색된 한개의 행의 정보를 읽어온다
LOOP --읽어온 정보는 INTO 뒤에 기술한 변수에 저장
FETCH C1 INTO VDEPARTMENTS.DEPARTMENT_ID, VDEPARTMENTS.DEPARTMENT_NAME,
VDEPARTMENTS.LOCATION_ID;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||''||
RPAD(VDEPARTMENTS.DEPARTMENT_NAME, 20)||''||VDEPARTMENTS.LOCATION_ID);
END LOOP;
CLOSE C1;
END;
/

DECLARE
VDEPARTMENTS DEPARTMENTS%ROWTYPE;
CURSOR C1
IS
SELECT * FROM DEPARTMENTS;
BEGIN
DBMS_OUTPUT.PUT_LINE('부서번호 / 부서명 / 지역명 ');
DBMS_OUTPUT.PUT_LINE('-------------------------');
FOR VDEPARTMENTS IN C1 LOOP
DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||''||
RPAD(VDEPARTMENTS.DEPARTMENT_NAME,20)||''||VDEPARTMENTS.LOCATION_ID);
END LOOP;
END;
/

DECLARE 
VDEPARTMENTS DEPARTMENTS%ROWTYPE;
BEGIN
DBMS_OUTPUT.PUT_LINE('부서번호/ 부서명/지역명');
DBMS_OUTPUT.PUT_LINE('--------------------');
FOR VDEPARTMENTS IN (SELECT * FROM DEPARTMENTS) LOOP -- 커서정의 부분을 FOR문에서 직접 명시
DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||''||
RPAD(VDEPARTMENTS.DEPARTMENT_NAME, 20)||''||VDEPARTMENTS.LOCATION_ID);
END LOOP;
END;
/

DECLARE
VRANDOMID EMPLOYEES.DEPARTMENT_ID%TYPE ; --임의의 부서번호
VSALARYSTRING VARCHAR2(20);

CURSOR CUR_EMPLOYEES(VDEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE)
IS
SELECT SALARY, FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = VDEPARTMENT_ID;
BEGIN
--임의의 부서번호를 얻어 출력
SELECT ROUND(DBMS_RANDOM.VALUE(10, 270), -1) INTO VRANDOMID FROM DUAL;
DBMS_OUTPUT.PUT_LINE('부서번호 :'|| VRANDOMID);

-- 그 부서번호가 120에서 270번까지 소속된 사원이 없기에 제어
IF VRANDOMID BETWEEN 120 AND 270 THEN
DBMS_OUTPUT.PUT_LINE(VRANDOMID ||'부서에 해당 사원이없습니다');
RETURN;
END IF;

DBMS_OUTPUT.PUT_LINE('사원명 / 급여/ 급여수준');
DBMS_OUTPUT.PUT_LINE('---------------------');

FOR VEMPLOYEES IN CUR_EMPLOYEES(VRANDOMID)LOOP
IF VEMPLOYEES.SALARY BETWEEN 1 AND 6000 THEN
VSALARYSTRING := '낮음';
ELSIF VEMPLOYEES.SALARY BETWEEN 6001 AND 10000 THEN
VSALARYSTRING := '중간';
ELSIF VEMPLOYEES.SALARY BETWEEN 10001 AND 20000 THEN
VSALARYSTRING := '높음';
ELSE
VSALARYSTRING := '최상위';
END IF;
DBMS_OUTPUT.PUT_LINE(RPAD(VEMPLOYEES.FIRST_NAME,6)||'/'||RPAD(VEMPLOYEES.SALARY,5)||'/'||VSALARYSTRING);
END LOOP;
END;
/